{"version":3,"sources":["Radio.tsx","Checkbox.tsx","Input.tsx","partForm.tsx","index.tsx"],"names":["Radio","_ref","value","onChange","options","name","label","handleChange","React","e","target","react","Box","mb","minWidth","FormControl","FormLabel","RadioGroup","map","option","FormControlLabel","control","Radio_Radio","checked","FormGroup","Checkbox","Input","_ref$inputType","inputType","props","Object","objectWithoutProperties","inputRef","_useToggle","useToggle","_useToggle2","slicedToArray","isError","toggleError","runValidation","useCallback","includes","inputValue","current","emailError","single","presence","email","length","phoneError","format","pattern","nameError","minimum","message","handleOnChange","getLabel","getPlaceholder","TextField","assign","placeholder","error","type","fullWidth","margin","InputLabelProps","shrink","InputProps","inputProps","ref","startAdornment","InputAdornment","position","AccountCircle_default","a","Email_default","Phone_default","getAdornmentIcon","OutlinedInput","Input_Input","variant","useStyles","makeStyles","root","width","heading","flexBasis","flexShrink","secondaryHeading","color","badge","marginRight","success_bg","backgroundColor","circle","borderRadius","SectionTitle","classes","Typography","gutterBottom","className","children","SectionSubtitle","Section","id","title","subtitle","content","incompleteCount","open","onExpandChange","toggleExpanded","ExpansionPanel","expanded","ExpansionPanelSummary","expandIcon","Badge","badgeContent","ExpandMore_default","Check_default","onClick","partForm_SectionTitle","partForm_SectionSubtitle","ExpansionPanelDetails","PartForm","_useMap","useMap","_useMap2","form","updateForm","_useMap3","_useMap4","userInfo","updateUserInfo","_useList","useList","_useList2","expandedPanels","updateExpandedPanels","handleExpandedChange","isExpanded","idIndex","indexOf","remove","push","handleDoneClick","setTimeout","sectionIndex","formConfig","findIndex","section","key","set","generateSubtitle","keyPrefix","keys","filter","optionKey","startsWith","matchingKey","join","createRadio","createCheckbox","handleInputChange","isFormComplete","fieldsToComplete","reduce","sum","completedFields","console","log","maxWidth","textAlign","role","aria-label","Input_OutlinedInput","bind","phone","keyName","partForm_Section","input","src_Radio","src_Checkbox","Button","disabled","my","alert","size","rootElement","document","getElementById","render","partForm"],"mappings":"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","file":"static/js/main.3a723b90.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Radio as RadioMui,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Box\n} from \"@material-ui/core\";\n\ninterface IRadioProps {\n  value?: string | number | null;\n  onChange?: (id: string, value: string | number | undefined) => void;\n  options: string[];\n  name: string;\n  label?: React.ReactNode;\n}\nexport const Radio = ({\n  value,\n  onChange,\n  options,\n  name,\n  label\n}: IRadioProps) => {\n  const handleChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(name, e.target.value);\n    },\n    [onChange, name]\n  );\n  return (\n    <Box mb=\"20px\" minWidth=\"200px\">\n      <FormControl>\n        {label && <FormLabel>{label}</FormLabel>}\n        <RadioGroup name={name} value={value} onChange={handleChange}>\n          {options.map((option: string) => {\n            return (\n              <FormControlLabel\n                value={option}\n                control={<RadioMui />}\n                label={option}\n              />\n            );\n          })}\n        </RadioGroup>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Radio;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormGroup,\n  FormControl,\n  FormControlLabel,\n  Box\n} from \"@material-ui/core\";\n\ninterface ICheckboxProps {\n  value?: boolean;\n  onChange?: (id: string, value: string | number | undefined | boolean) => void;\n  name: string;\n  label?: React.ReactNode;\n}\nexport const Radio = ({ value, onChange, name, label }: ICheckboxProps) => {\n  const handleChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      onChange && onChange(name, e.target.checked && (label as string));\n    },\n    [onChange, name, label]\n  );\n  return (\n    <Box minWidth=\"200px\">\n      <FormControl>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox checked={value} onChange={handleChange} value={name} />\n            }\n            label={label}\n          />\n        </FormGroup>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Radio;\n","import * as React from \"react\";\nimport { TextField, InputAdornment } from \"@material-ui/core\";\nimport {\n  TextFieldProps,\n  OutlinedTextFieldProps\n} from \"@material-ui/core/TextField\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport { useCallback } from \"react\";\nimport { useToggle } from \"react-use\";\nimport { single } from \"validate.js\";\n\ndeclare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\ninterface InputProps {\n  inputType?: \"name\" | \"email\" | \"tel\";\n}\n\nexport const Input = ({\n  inputType = \"name\",\n  onChange,\n  ...props\n}: InputProps & TextFieldProps) => {\n  const inputRef = React.useRef<HTMLInputElement>();\n  const [isError, toggleError] = useToggle(false);\n  function getAdornmentIcon() {\n    switch (inputType) {\n      case \"name\":\n        return <AccountCircleIcon />;\n      case \"email\":\n        return <EmailIcon />;\n      case \"tel\":\n        return <PhoneIcon />;\n      default:\n        return null;\n    }\n  }\n  const runValidation = useCallback(() => {\n    let typesToValidate = [\"email\", \"tel\", \"name\"];\n    if (typesToValidate.includes(inputType)) {\n      let inputValue = inputRef && inputRef.current && inputRef.current.value;\n      switch (inputType) {\n        case \"email\":\n          let emailError = single(inputValue, {\n            presence: true,\n            email: true\n          });\n          toggleError(!!(emailError && emailError.length));\n          break;\n        case \"tel\":\n          let phoneError = single(inputValue, {\n            presence: true,\n            format: {\n              pattern: /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/\n            }\n          });\n          toggleError(!!(phoneError && phoneError.length));\n          break;\n        case \"name\":\n          let nameError = single(inputValue, {\n            presence: true,\n            length: {\n              minimum: 6,\n              message: \"must be at least 6 characters\"\n            }\n          });\n          toggleError(!!(nameError && nameError.length));\n          break;\n        default:\n          return true;\n      }\n    }\n    return true;\n  }, [toggleError, inputType]);\n\n  const handleOnChange = useCallback(\n    e => {\n      onChange && onChange(e);\n      runValidation();\n    },\n    [onChange, runValidation]\n  );\n  const getLabel = useCallback(() => {\n    switch (inputType) {\n      case \"name\":\n        return \"Name\";\n      case \"tel\":\n        return \"Phone\";\n      case \"email\":\n        return \"Email\";\n      default:\n        return \"\";\n    }\n  }, [inputType]);\n  const getPlaceholder = useCallback(() => {\n    switch (inputType) {\n      case \"name\":\n        return \"Jon Ward\";\n      case \"tel\":\n        return \"1234567890\";\n      case \"email\":\n        return \"example@gmail.com\";\n      default:\n        return \"\";\n    }\n  }, [inputType]);\n  return (\n    <TextField\n      label={getLabel()}\n      placeholder={getPlaceholder()}\n      error={isError}\n      type={inputType}\n      fullWidth\n      margin=\"normal\"\n      InputLabelProps={{\n        shrink: true\n      }}\n      InputProps={{\n        inputProps: { ref: inputRef },\n        startAdornment: (\n          <InputAdornment position=\"start\">{getAdornmentIcon()}</InputAdornment>\n        )\n      }}\n      {...props}\n      onChange={handleOnChange}\n    />\n  );\n};\nexport const OutlinedInput = (props: InputProps & TextFieldProps) => (\n  <Input {...props} variant=\"outlined\" />\n);\nexport default Input;\n","import * as React from \"react\";\nimport {\n  Box,\n  Typography,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  makeStyles,\n  Badge,\n  Button\n} from \"@material-ui/core\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useMap, useList } from \"react-use\";\nimport Radio from \"./Radio\";\nimport Checkbox from \"./Checkbox\";\nimport { OutlinedInput } from \"./Input\";\nimport { useCallback } from \"react\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    flexBasis: \"45%\",\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    color: \"gray\"\n  },\n  badge: {\n    marginRight: \"15px\",\n    width: \"70px\"\n  },\n  success_bg: {\n    backgroundColor: \"#39C16C\",\n    color: \"white\"\n  },\n  circle: {\n    borderRadius: \"50%\"\n  }\n}));\n\nconst SectionTitle = (props: {\n  children: React.ReactNode | React.ReactNode[];\n  wrapperProps?: any;\n}) => {\n  const classes = useStyles({});\n  return (\n    <Typography variant=\"h6\" gutterBottom className={classes.heading}>\n      {props.children}\n    </Typography>\n  );\n};\n\nconst SectionSubtitle = (props: {\n  children: React.ReactNode | React.ReactNode[];\n  wrapperProps?: any;\n}) => {\n  const classes = useStyles({});\n  return (\n    <Typography\n      variant=\"subtitle1\"\n      gutterBottom\n      className={classes.secondaryHeading}\n    >\n      {props.children}\n    </Typography>\n  );\n};\n\nconst Section = (props: {\n  id: string;\n  title: React.ReactNode | React.ReactNode[];\n  subtitle?: React.ReactNode | React.ReactNode[];\n  content: React.ReactNode | React.ReactNode[];\n  incompleteCount?: number;\n  open?: boolean;\n  onExpandChange?: (expandedState: boolean) => void;\n}) => {\n  const {\n    id,\n    title,\n    subtitle,\n    content,\n    incompleteCount,\n    open,\n    onExpandChange\n  } = props;\n  const classes = useStyles({});\n  const toggleExpanded = useCallback(\n    () => onExpandChange && onExpandChange(!open),\n    [open, onExpandChange]\n  );\n  return (\n    <ExpansionPanel expanded={!!open}>\n      <ExpansionPanelSummary\n        expandIcon={\n          incompleteCount && !open ? (\n            <Badge\n              className={classes.badge}\n              badgeContent={incompleteCount + \" Missing\"}\n              color=\"secondary\"\n            >\n              {null}\n            </Badge>\n          ) : open ? (\n            <ExpandMoreIcon />\n          ) : (\n            <CheckIcon className={classes.success_bg + \" \" + classes.circle} />\n          )\n        }\n        id={id}\n        onClick={toggleExpanded}\n      >\n        <SectionTitle>{title}</SectionTitle>\n        <SectionSubtitle>{subtitle}</SectionSubtitle>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>{content}</ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n\nexport const PartForm = () => {\n  const [form, updateForm] = useMap();\n  const [userInfo, updateUserInfo] = useMap();\n  const [expandedPanels, updateExpandedPanels] = useList<string>();\n  const handleExpandedChange = (id: string, isExpanded: boolean) => {\n    let idIndex = expandedPanels.indexOf(id);\n    if (idIndex >= 0) {\n      // ID IN ARRAY\n      if (!isExpanded) {\n        //SHOULD BE REMOVED\n        updateExpandedPanels.remove(idIndex);\n      }\n    } else {\n      // ID NOT IN ARRAY\n      if (isExpanded) {\n        // SHOULD BE ADDED\n        updateExpandedPanels.push(id);\n      }\n    }\n  };\n  const handleDoneClick = (id: string) => {\n    handleExpandedChange(id, false);\n    setTimeout(() => {\n      let sectionIndex = formConfig.findIndex(section => section.id === id);\n      handleExpandedChange(formConfig[sectionIndex + 1].id, true);\n    }, 500);\n  };\n  const handleChange = (key: string, value: any) => {\n    updateForm.set(key, value);\n  };\n  const generateSubtitle = (keyPrefix: string) => {\n    return Object.keys(form)\n      .filter(optionKey => optionKey.startsWith(keyPrefix + \"_\"))\n      .map((matchingKey: string) => form[matchingKey])\n      .join(\", \");\n  };\n  const createRadio = (label: string, id: string, options: string[]) => ({\n    type: \"radio\",\n    label,\n    name: id,\n    options\n  });\n  const createCheckbox = (label: string, id: string) => ({\n    type: \"checkbox\",\n    label,\n    name: id\n  });\n  const formConfig: Array<{\n    title: string;\n    id: string;\n    content: any;\n  }> = [\n    {\n      title: \"Ham\",\n      id: \"ham\",\n      content: [\n        createRadio(\n          \"Do you want your ham fresh or cured and smoked?\",\n          \"ham_freshOrCured\",\n          [\"Fresh\", \"Cured & Smoked\"]\n        ),\n        createRadio(\"Do you want the ham whole or sliced?\", \"ham_wholeSliced\", [\n          \"Whole\",\n          \"Sliced\"\n        ])\n      ]\n    },\n    {\n      title: \"Shoulder\",\n      id: \"shoulder\",\n      content: [\n        createRadio(\n          \"Do you want the shoulder fresh or cured or made into sausage?\",\n          \"shoulder_freshOrCured\",\n          [\"Fresh\", \"Cured\", \"Sausage\"]\n        ),\n        createRadio(\n          \"Do you want the shoulder whole or sliced?\",\n          \"shoulder_wholeSliced\",\n          [\"Whole\", \"Sliced\"]\n        )\n      ]\n    },\n    {\n      title: \"Belly\",\n      id: \"belly\",\n      content: [\n        createRadio(\n          \"Do you want this made into bacon or left as fresh pork belly? \",\n          \"belly_baconOrFresh\",\n          [\"Bacon\", \"Fresh\"]\n        ),\n        createRadio(\n          \"Do you want it left whole or sliced?\",\n          \"belly_wholeSliced\",\n          [\"Whole\", \"Sliced\"]\n        ),\n        createRadio(\n          \"Do you want it packed in packages of 1lb or 2lb?\",\n          \"belly_packSize\",\n          [\"1lb\", \"2lb\"]\n        )\n      ]\n    },\n    {\n      title: \"Pork Butt\",\n      id: \"butt\",\n      content: [\n        createRadio(\n          \"Do you want this cut into country style ribs or made into roasts or should we add it to the sausage?\",\n          \"butt_ribsRoastsSausage\",\n          [\"Ribs\", \"Roasts\", \"More Sausage\"]\n        )\n      ]\n    },\n    {\n      title: \"Loin\",\n      id: \"loin\",\n      content: [\n        createRadio(\n          \"Do you want pork chops or boneless loin roast or bone-in loin roast?\",\n          \"loin_chopsRoast\",\n          [\"Chops\", \"Roasts\", \"Roasts (bone-in)\"]\n        )\n      ]\n    },\n    {\n      title: \"Chops\",\n      id: \"chops\",\n      content: [\n        createRadio(\n          'How thick do you want the pork chops? (1\" thick is standard)',\n          \"chops_thickness\",\n          ['3/4\"', '1\"', '1 1/2\"']\n        ),\n        createRadio(\n          \"How many chops would you like in each package?\",\n          \"chops_packageCount\",\n          [\"2\", \"3\", \"4\"]\n        )\n      ]\n    },\n    {\n      title: \"Roasts\",\n      id: \"roasts\",\n      content: [\n        createRadio(\n          \"What size would you like the roasts to be?\",\n          \"roasts_size\",\n          [\"3lb\", \"4lb\", \"5lb\"]\n        )\n      ]\n    },\n    {\n      title: \"Sausage\",\n      id: \"sausage\",\n      content: [\n        createCheckbox(\"Regular\", \"sausage_regular\"),\n        createCheckbox(\"Hot Italian\", \"sausage_hotItalian\"),\n        createCheckbox(\"Mild Italian\", \"sausage_mildItalian\"),\n        createCheckbox(\"Chorizo\", \"sausage_chorizo\"),\n        createCheckbox(\"Andouille\", \"sausage_andouille\"),\n        createRadio(\n          \"Do you want your sausage loose or linked?\",\n          \"sausage_looseLinked\",\n          [\"Loose\", \"Linked\"]\n        ),\n        createRadio(\n          \"Do you want the sausage packaged in 1lb or 2lb packs?\",\n          \"sausage_packageSize\",\n          [\"1lb\", \"2lb\"]\n        )\n      ]\n    }\n  ];\n  function countCompletedInputs(keyPrefix: string) {\n    return Object.keys(form).filter(keyName =>\n      keyName.startsWith(keyPrefix + \"_\")\n    ).length;\n  }\n  const handleInputChange = useCallback(\n    (key: string, e: React.ChangeEvent<HTMLInputElement>) => {\n      updateUserInfo.set(key, e.target.value);\n    },\n    [updateUserInfo]\n  );\n  const isFormComplete = useCallback(() => {\n    let fieldsToComplete =\n      3 + formConfig.reduce((sum, section) => sum + section.content.length, 0);\n    let completedFields = Object.keys(form).length;\n    console.log(\n      completedFields,\n      fieldsToComplete,\n      completedFields >= fieldsToComplete\n    );\n    return completedFields >= fieldsToComplete;\n  }, [formConfig, form]);\n  return (\n    <Box maxWidth={400}>\n      <Box textAlign=\"center\">\n        <Typography variant=\"h3\">Stohlman Acres</Typography>\n        <Typography variant=\"h5\">\n          {\" \"}\n          <span role=\"img\" aria-label=\"knife\">\n            🔪\n          </span>{\" \"}\n          Cut Sheet{\" \"}\n          <span role=\"img\" aria-label=\"knife\">\n            🔪\n          </span>\n        </Typography>\n      </Box>\n      <Box>\n        <OutlinedInput\n          id=\"name\"\n          inputType=\"name\"\n          value={userInfo.name}\n          onChange={handleInputChange.bind(null, \"name\")}\n        />\n        <OutlinedInput\n          id=\"email\"\n          inputType=\"email\"\n          value={userInfo.email}\n          onChange={handleInputChange.bind(null, \"email\")}\n        />\n        <OutlinedInput\n          id=\"phone\"\n          inputType=\"tel\"\n          value={userInfo.phone}\n          onChange={handleInputChange.bind(null, \"phone\")}\n        />\n      </Box>\n      {formConfig.map((section: any) => {\n        let incompleteCount =\n          section.content.length - countCompletedInputs(section.id);\n        return (\n          <Section\n            {...section}\n            subtitle={generateSubtitle(section.id)}\n            incompleteCount={incompleteCount}\n            open={expandedPanels.includes(section.id)}\n            onExpandChange={handleExpandedChange.bind(null, section.id)}\n            content={\n              <Box>\n                {section.content.map((input: any) => {\n                  switch (input.type) {\n                    case \"radio\":\n                      return (\n                        <Radio\n                          {...input}\n                          onChange={handleChange}\n                          value={form[input.name]}\n                        />\n                      );\n                    case \"checkbox\":\n                      return (\n                        <Checkbox\n                          {...input}\n                          onChange={handleChange}\n                          value={form[input.name]}\n                        />\n                      );\n                    default:\n                      return null;\n                  }\n                })}\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!!incompleteCount}\n                  onClick={handleDoneClick.bind(null, section.id)}\n                >\n                  Next\n                </Button>\n              </Box>\n            }\n          />\n        );\n      })}\n      <Box my=\"20px\">\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disabled={!isFormComplete()}\n          onClick={() => alert(\"done\")}\n          fullWidth\n          size=\"large\"\n        >\n          Submit Order\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default PartForm;\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport PartForm from \"./partForm\";\nimport Orders from \"./Orders\";\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PartForm />\n      {/* <Orders /> */}\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}